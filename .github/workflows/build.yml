name: Build and Deploy to ECS

on:
  push:
    branches:
      - main # Change this to your default branch if it's different

jobs:
  # Build and Push to ECR Job
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR Public
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Build the Docker image
        run: |
          docker build -t swiggy-app .

      - name: Tag the Docker image
        run: |
          IMAGE_URI=public.ecr.aws/k7m2z4k7/swiggy-app:latest
          docker tag swiggy-app $IMAGE_URI

      - name: Push the Docker image to ECR
        run: |
          IMAGE_URI=public.ecr.aws/k7m2z4k7/swiggy-app:latest
          docker push $IMAGE_URI

      - name: Set IMAGE_URI for deployment
        run: echo "IMAGE_URI=public.ecr.aws/k7m2z4k7/swiggy-app:latest" >> $GITHUB_ENV

  # Deploy to ECS Job
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS Service with New Image
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }}
          CLUSTER_NAME: swiggy-app
          SERVICE_NAME: swiggy-app-service
          TASK_DEFINITION: swiggy-app-task

        run: |
          # Install jq
          sudo apt-get install -y jq

          # Fetch the current task definition
          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION)

          # Update the task definition with the new image URI
          NEW_TASK_DEF=$(echo $TASK_DEF_JSON | jq --arg IMAGE_URI "$IMAGE_URI" '.taskDefinition.containerDefinitions[0].image = $IMAGE_URI')

          # Print the new task definition JSON for debugging
          echo "New Task Definition JSON: $NEW_TASK_DEF"
          echo $NEW_TASK_DEF | jq . || { echo "Invalid JSON"; exit 1; }

          # Register a new revision of the task definition
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEF | aws ecs register-task-definition --cli-input-json file:///dev/stdin | jq -r '.taskDefinition.taskDefinitionArn')

          # Update the ECS service to use the new task definition revision
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN
